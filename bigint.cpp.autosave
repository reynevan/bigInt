#include "bigint.h"

BigInt::BigInt(std::string number)
{
    _sign = SIGN_POSITIVE;
    std::string character;
    for (unsigned int i = 0; i < number.size(); i++){
        character = number.substr(i, 1);
        if (_isDigit(character)){
            _number.push_back(std::stoi(character));
        } else if (i == 0 && character == std::string("-")){
            _sign = SIGN_NEGATIVE;
        }
    }
}

BigInt::BigInt(int number)
{
    (*this) = BigInt(std::to_string(number));
}

BigInt::BigInt()
{
    (*this) = BigInt(0);
}

BigInt::operator std::string()
{
    std::string str = std::string();
    if (_sign == SIGN_NEGATIVE){
        str.append("-");
    }
    for (auto it = _number.begin(); it != _number.end(); ++it){
        str.append(std::to_string(*it));
    }
    return str;
}

void BigInt::operator +=(BigInt num)
{
    if (_sign == SIGN_POSITIVE && num._sign == SIGN_NEGATIVE){
        return (*this) -= num.abs();
    }
    if (_sign == SIGN_NEGATIVE && num._sign  == SIGN_POSITIVE){
        (*this) = num - (*this).abs();
        return;
    }
    BigInt num1 = getLength() >= num.getLength() ? (*this) : num;
    BigInt num2 = getLength() >= num.getLength() ? num : (*this);
    int carry = 0;
    for (auto digit = num1._number.rbegin(); digit != num1._number.rend(); ++digit){
        if (num2.getLength() > 0){
            (*digit) += num2._number.back();
            num2._number.pop_back();
        }
        (*digit) += carry;
        carry = 0;
        if (*digit >= 10){
            (*digit) -= 10;
            if (digit == (num1._number.rend() - 1)){
                num1._number.push_front(1);
            } else {
                carry = 1;
            }
        }
    }
    (*this) = num1;
}

void BigInt::operator +=(std::string num)
{
    (*this) += BigInt(num);
}

void BigInt::operator +=(int num)
{
    (*this) += BigInt(num);
}

void BigInt::operator -=(BigInt num)
{
    if (num._sign == SIGN_NEGATIVE){
        return (*this) += num.abs();
    }
    if (_sign == SIGN_NEGATIVE){
        *this = (*this).abs() + num;
        (*this)._sign = SIGN_NEGATIVE;
        return;
    }
    BigInt minuent = (*this) >= num ? (*this) : num;
    BigInt subtrahend = (*this) >= num ? num : (*this);
    int carry = 0;
    for (auto digit = minuent._number.rbegin(); digit != minuent._number.rend(); ++digit){
        if (subtrahend.getLength() > 0){
            (*digit) -= subtrahend._number.back();
            subtrahend._number.pop_back();
        }
        (*digit) -= carry;
        carry = 0;
        if (*digit < 0){
            if (digit != minuent._number.rbegin() - 1){
                (*digit) += 10;
                carry = 1;
            } else {
                (*digit) *= -1;
                minuent._sign = SIGN_NEGATIVE;
            }
        }
    }
    bool negative = (*this) < num;
    (*this) = minuent.copy();
    if (negative && (*this) != 0){
        _sign = SIGN_NEGATIVE;
    }
    _lTrim();
}

void BigInt::operator -=(std::string num)
{
    (*this) -= BigInt(num);
}

void BigInt::operator -=(int num)
{
    (*this) -= BigInt(num);
}

void BigInt::operator *=(BigInt num)
{
    if ((*this) == 1){
        (*this) = num;
        return;
    }
    if (num == 1){
        return;
    }
    if ((*this) == 0 || num == 0){
        (*this) = 0;
        return;
    }
    BigInt result = BigInt(0);
    std::deque<BigInt> rows;
    int carry = 0;
    int partResult = 0;
    int index = 0;
    for (auto multiplicant_digit = num._number.rbegin(); multiplicant_digit != num._number.rend(); multiplicant_digit++){
        rows.push_back(BigInt(0));
        rows.back()._number.pop_back();
        for (int i = 0; i < index; i++){
            rows.back()._number.push_back(0);
        }
        index++;
        carry = 0;
        for (auto multiplier_digit = _number.rbegin(); multiplier_digit != _number.rend(); multiplier_digit++){
            partResult = (*multiplicant_digit) * (*multiplier_digit) + carry;
            //std::cout <<(*multiplicant_digit) <<"*"<< (*multiplier_digit) <<"+"<<carry<<"="<<partResult<<std::endl;
            if (partResult >= 10){
                carry = (int)partResult / 10;
                partResult %= 10;
            } else {
                carry = 0;
            }
            rows.back()._number.push_front(partResult);
        }
        if (carry > 0){
            rows.back()._number.push_front(carry);
        }
    }
    for (std::deque<BigInt>::iterator row = rows.begin(); row != rows.end(); row++){
        result += (*row);
    }
    result._sign = _sign ^ num._sign ? SIGN_NEGATIVE : SIGN_POSITIVE;
    (*this) = result;
}

void BigInt::operator *=(int num)
{
    (*this) *= BigInt(num);
}

void BigInt::operator *=(std::string num)
{
    (*this) *= BigInt(num);
}

void BigInt::operator /=(BigInt num)
{
    if (num == (*this)){
        (*this) = 1;
        return;
    }
    if (2 * num.abs() > this->abs()){
        (*this) = 0;
        return;
    }

    BigInt result = 0;
    BigInt currentDivident;
    BigInt partialResult;

    for (auto digit = _number.cbegin(); digit != _number.cend(); ++digit){
        currentDivident._number.push_back(*digit);
        currentDivident._lTrim();
        if (currentDivident < num){
            continue;
        }
        for (int i = 1; i < 10; i++){
            if (num * i >= currentDivident){
                result._lTrim();
                result._number.push_back(--i);
                currentDivident -= (i * num);
                break;
            }
        }
        std::cout << (std::string)currentDivident<<std::endl;
    }



    result._lTrim();
    (*this) = result;

}

BigInt BigInt::operator +(int num)
{
    BigInt copy = (*this).copy();
    copy += num;
    return copy;
}

BigInt BigInt::operator +(BigInt num)
{
    BigInt copy = (*this).copy();
    copy += num;
    return copy;
}

BigInt BigInt::operator -(int num)
{
    BigInt copy = (*this).copy();
    copy -= num;
    return copy;
}

BigInt BigInt::operator -(BigInt num)
{
    BigInt copy = (*this).copy();
    copy -= num;
    return copy;
}

BigInt BigInt::operator *(BigInt num)
{
    BigInt copy = (*this).copy();
    copy *= num;
    return copy;
}

BigInt BigInt::operator *(int num)
{
    BigInt copy = (*this);
    copy *= num;
    return copy;
}

BigInt BigInt::operator ++(int a)
{
    BigInt copy = (*this).copy();
    (*this) += 1;
    return copy;
}

BigInt BigInt::operator --(int a)
{
    BigInt copy = (*this).copy();
    (*this) -= 1;
    return copy;
}

bool BigInt::operator == (const BigInt &other)
{
    if (_sign ^ other._sign){
        return false;
    }
    if (getLength() != other.getLength()){
        return false;
    }
    for (int i = 0; i < getLength(); i++){
        if (_number.at(i) != other._number.at(i)){
            return false;
        }
    }
    return true;
}

bool BigInt::operator == (const int& other)
{
    return (*this) == BigInt(other);
}

bool BigInt::operator != (const int& other)
{
    return !((*this) == BigInt(other));
}

bool BigInt::operator != (const BigInt& other)
{
    return !((*this) == BigInt(other));
}

bool BigInt::operator < (const BigInt& other)
{
    if (other._sign == SIGN_POSITIVE && _sign == SIGN_NEGATIVE){
        return true;
    }
    if (other._sign == SIGN_NEGATIVE && _sign == SIGN_POSITIVE){
       return false;
    }
    if (other._sign == SIGN_POSITIVE && _sign == SIGN_POSITIVE){
        if (other.getLength() > getLength()){
            return true;
        }
        if (other.getLength() < getLength()){
            return false;
        }
    }
    if (other._sign == SIGN_NEGATIVE && _sign == SIGN_NEGATIVE){
        if (other.getLength() < getLength()){
            return true;
        }
        if (other.getLength() > getLength()){
            return false;
        }
    }
    for (int i = 0; i < getLength(); i++){
        if (_number.at(i) == other._number.at(i)){
            continue;
        }
        return ((_number.at(i) < other._number.at(i)) && _sign == SIGN_POSITIVE) || ((_number.at(i) > other._number.at(i)) && _sign == SIGN_NEGATIVE);
    }

    return false;
}

bool BigInt::operator > (const BigInt& other)
{
    return !((*this) < other) && !((*this) == other);
}

bool BigInt::operator <= (const BigInt& other)
{
    return ((*this) < other || (*this) == other);
}

bool BigInt::operator >= (const BigInt& other)
{
    return ((*this) > other || (*this) == other);
}

BigInt BigInt::abs()
{
    BigInt num = (*this).copy();
    num._sign = SIGN_POSITIVE;
    return num;
}

BigInt BigInt::copy()
{
    BigInt copy = BigInt((std::string)(*this));
    return copy;
}

int BigInt::getLength() const
{
    return _number.size();
}

void BigInt::_lTrim()
{
    for(auto it = _number.begin(); it != _number.end(); ++it){
        if (*it == 0 && it != _number.end() - 1){
            _number.pop_front();
        } else {
            break;
        }
    }
}

bool BigInt::_isDigit(const std::string & digit)
{
    if(digit.empty()) return false;

    char * p ;
    strtol(digit.c_str(), &p, 10) ;

    return (*p == 0) ;
}

std::ostream& operator <<(std::ostream& os, BigInt num)
{
    os << (std::string)(num);
    return os;
}

BigInt operator *(int num1, BigInt num2)
{
    return num2 * num1;
}

BigInt operator +(int num1, BigInt num2)
{
    return num2 + num1;
}

BigInt operator -(int num1, BigInt num2)
{
    return BigInt(num1) - num2;
}
